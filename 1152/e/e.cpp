/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-05-05 21:21:27
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/

const int maxn = 1e5+ 100;
vector<int> ID;
int n;
int b[maxn];
int c[maxn];
multiset<int> E[maxn];
int d[maxn];
inline int get_id(int val){
    return 1 + lower_bound(ID.begin(),ID.end(),val) - ID.begin(); 
}
inline int get_val(int id){
    return ID[id-1];
}
bool used[maxn];
void dfs(int u){
    used[u] = true;
    for (int v : E[u]){
        if (!used[v]){
            dfs(v);
        }
    }
}
void check(){
    dfs(1);
    for (int i=1;i<=ID.size();i++){
        if (!used[i]){
            puts("-1");
            exit(0);
        }
    }
}
vector<int> ans(0);
void gao(int start,int end){
    ans.push_back(start);
    int now = start;
    while (ans.size() != n){
        bool found = false;
        for (int v : E[now]){
            if (E[v].size() & 1)continue;
            E[now].erase(E[now].find(v));
            E[v].erase(E[v].find(now));
            now = v;
            ans.push_back(now);
            found = true;
            break;
        }
        if (found)continue;
        if (E[now].count(end)){
            now = end;
            ans.push_back(now);
            assert(ans.size() == n);
        }
    }
    for (int v : ans){
        cout<<get_val(v)<<" ";
    }
    cout<<endl;

}
int main(){
    cin>>n;
    for (int i=1;i<n;i++){
        cin>>b[i];
        ID.push_back(b[i]);
    }
    for (int i=1;i<n;i++){
        cin>>c[i];
        ID.push_back(c[i]);
    }
    sort(ID.begin(),ID.end());
    ID.erase(unique(ID.begin(),ID.end()),ID.end());
    for (int i=1;i<n;i++){
        b[i] = get_id(b[i]);
        c[i] = get_id(c[i]);
        int u,v;
        tie(u,v) = make_pair(b[i],c[i]);
        E[u].insert(v);
        E[v].insert(u);
    }
    check();
    int odd_cnt = 0;
    int start = -1,end = -1;
    for (int i=1;i<=ID.size();i++){
        if (E[i].size() & 1){
            odd_cnt ++;
            if (start == -1)start = i;
            else if (end == -1)end = i;
        }
    }
    if (odd_cnt == 0){
        start = 1;
        end = 1;
    }
    if (start == -1){
        puts("-1");
        return 0;
    }
    gao(start,end);
    return 0;
}
