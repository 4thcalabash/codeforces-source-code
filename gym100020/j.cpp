/* Generated by powerful Codeforces Tool
 * Author: calabash_boy_love_15 
 * Time: 2019-04-28 14:54:23
 * Personal Code Template: https://github.com/4thcalabash/ACM-Code-Library
**/
#pragma GCC optimize(3)
#include <bits/stdc++.h>
using namespace std;
#ifdef __LOCAL_DEBUG__
# define _debug(fmt, ...) fprintf(stderr, "\033[91m[%s %3d]: " fmt "\n\033[0m", \
  __func__,__LINE__, ##__VA_ARGS__)
#else
# define _debug(...) (void(0))
#endif
#define PB(x) push_back(x)
#define rep(i,l,r) for (int i = l,_ = r;i< _;i++)
#define REP(i,l,r) for (int i=l,_=r;i<=_;i++)
#define leave(x) do {cout<<#x<<endl;fflush(stdout);return 0;}while (0);
#define untie do{ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);}while (0)
#define range(x) x.begin(),x.end()
typedef long long LL;
typedef long long ll;
typedef vector<int> vi;
typedef long double db;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef tuple<int,int,int> ti;
const int inf = 0x3f3f3f3f;
const ll inf_ll = 0x3f3f3f3f3f3f3f3fLL;
/************* header ******************/
const int maxn = 2e5+100;
bool used[maxn];
vector<int> E[maxn];
int n,m;
int b[maxn];
char s[maxn];
int fa[maxn];
int find(int x){
    return fa[x] == x?x : fa[x] = find(fa[x]);
}
vector<ti> all_edges;
vector<ti> use_edges;
vector<int> ans;
int dep[maxn];
int sz[maxn];
void dfs(int u,int fa){
    dep[u] = dep[fa] + 1;
    sz[u] = b[u];
    for (int v : E[u]){
        if (v == fa)continue;
        dfs(v,u);
        sz[u] += sz[v];
    }
}
int main(){
#ifndef __LOCAL
    freopen("uprtoff.in","r",stdin);
    freopen("uprtoff.out","w",stdout);
#endif
    scanf("%d%d",&n,&m);
    scanf("%s",s+1);
    for (int i=1;i<=n;i++){
        b[i] = s[i] == 'B';
        fa[i] = i;
    }
    for (int i=1;i<=m;i++){
        int u,v;
        scanf("%d%d",&u,&v);
        all_edges.PB(make_tuple(u,v,i));
    }
    reverse(all_edges.begin(),all_edges.end());
    for (auto tp : all_edges){
        int u,v,id;
        tie(u,v,id) = tp;
        int fu = find(u);
        int fv = find(v);
        if (fu == fv)continue;
        fa[fu] = fv;
        use_edges.PB(make_tuple(u,v,id));
        E[u].PB(v);
        E[v].PB(u);
    }
    for (int i=1;i<=n;i++){
        if (i == find(i)){
            dfs(i,0);
            if (sz[i] & 1){
                puts("0");
                return 0;
            }
        }
    }
    for (auto tp : use_edges){
        int u,v,id;
        tie(u,v,id) = tp;
        if (dep[u] < dep[v])swap(u,v);
        if (sz[u] & 1)ans.PB(id);
    }
    reverse(ans.begin(),ans.end());
    for (int x : ans){
        printf("%d ",x);
    }
    puts("");
    return 0;
}
